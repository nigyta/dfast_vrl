#!/usr/bin/env python

import os
import sys
import shutil
import logging
from argparse import ArgumentParser
from dfv.vadr import run as run_vadr
from dfv.vadr2ddbj import VADR2DDBJ
from dfv.genbank2mss import MSS2
from dfv.preprocessing import preprocess_contigs

dfv_version = "1.2_0.1"

def parse_args():
    parser = ArgumentParser(description=f"DFAST_VRL: Viral genome annotation and data submission tool to DDBJ (ver. {dfv_version})")
    parser.add_argument('--version', version=f'DFAST_VRL ver. {dfv_version}', action='version', help="Show program version", default=False)
    parser.add_argument(
        "-i",
        "--input_fasta",
        type=str,
        # required=True,
        help="Input FASTA file (raw or gzipped) [required]",
        metavar="PATH"
    )
    parser.add_argument(
        "-m",
        "--metadata_file",
        type=str,
        help="Metadata file (Tab-separated table) [Optional]",
        metavar="PATH"
    )
    parser.add_argument(
        "-o",
        "--out_dir",
        type=str,
        help="Output directory (default: OUT)",
        metavar="PATH",
        default="OUT"
    )
    parser.add_argument(
        '--enable_scaffolding',
        action='store_true',
        help='Fill gaps between contigs with runs of Ns of estimated length'
    )
    parser.add_argument(
        '--force',
        action='store_true',
        help='Force overwriting result'
    )
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Debug mode'
    )
    if len(sys.argv)==1:
        parser.print_help()
        exit()
    args = parser.parse_args()
    return args

args = parse_args()

if args.input_fasta is None:
    sys.stderr.write("DFAST_VRL: error: Query FASTA is not specified. Aborted.\n")
    exit(1)

def get_logger(name=None, debug=False):
    if debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO
    logging.basicConfig(
        format="[%(asctime)s] [%(levelname)s] %(message)s",
        level=log_level,
        stream=sys.stdout) 
           
    # formatter = logging.Formatter("[%(asctime)s] [%(levelname)s] %(message)s")
    logger = logging.getLogger(name)
    # handler = logging.StreamHandler(stream=sys.stdout)
    # handler.setLevel(log_level)  # INFO or DEBUG
    # handler.setFormatter(formatter)
    # logger.addHandler(handler)
    # if config.LOG_FILE and not config.ADMIN:
    #     log_file = os.path.join(config.OUT_DIR, config.LOG_FILE)
    #     fh = FileHandler(log_file, mode="a", encoding="utf-8", delay=True)
    #     fh.setLevel(log_level)
    #     fh.setFormatter(formatter)
    #     logger.addHandler(fh)
    # logger.setLevel(log_level)  # INFO or DEBUG
    return logger

logger = get_logger(name=__name__, debug=args.debug)

# Prepare working directories
work_dir = args.out_dir
pp_work_dir = os.path.join(work_dir, "preprocessing")
vadr_work_dir = os.path.join(work_dir, "vadr")
if os.path.exists(work_dir) and not args.force:
    if not args.force:
        sys.stderr.write("DFAST_VRL: error: Output directory already exists. Use '--force' to overwrite.\n")
        exit(1)
else:
    os.makedirs(work_dir, exist_ok=True)



# Execution
##1. Preprocessing
preprocessing_result_fasta = preprocess_contigs(args.input_fasta, pp_work_dir, 
    output_fasta=None, reference_fasta=None, scaffolding=args.enable_scaffolding)

##2. Run VADR
logging.info("Running VADR")
vadr_result_fasta, vadr_result_ftr = run_vadr(preprocessing_result_fasta, vadr_work_dir)


##3. Format conversion
output_gbk = os.path.join(work_dir, "annotation.gbk")
mss_file_prefix = "DDBJ"
metadata_file_copy = os.path.join(work_dir, "metadata.txt")
if args.metadata_file is None:
    # Create dummy metadata file
    with open(metadata_file_copy, "w") as f:
        f.write("projectType\tvrl")
else:
    shutil.copy(args.metadata_file, metadata_file_copy)

v2d = VADR2DDBJ(vadr_result_fasta, vadr_result_ftr)
v2d.to_gbk(output_gbk)
mss = MSS2(output_gbk, metadata_file_copy)
mss.convert(work_dir, mss_file_prefix)
logging.info("DFAST_VRL completed")
